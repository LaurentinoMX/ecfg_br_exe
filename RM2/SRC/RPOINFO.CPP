/*---------------------------------------------------------------
 * rpoinfo.cpp:
 *
 * Generated by the KASE:Set User Interface Class Library
 * knowledgebase
 *
 *--------------------------------------------------------------*/
#include <os2.h>

#include <stdio.h>                      // fopen
#include <sys\types.h>                  // stat
#include <sys\stat.h>                   // stat

#include <icmdhdr.hpp>                  // ICommandHandler
#include <iedithdr.hpp>                 // IEditHandler
#include <ientryfd.hpp>                 // IEntryField
#include <iframe.hpp>                   // IFrameWindow
#include <ihelp.hpp>                    // IHelpWindow
#include <ikeyhdr.hpp>                  // IKeyboardHandler
#include <imsgbox.hpp>                  // IMessageBox
#include <ipushbut.hpp>                 // IPushButton
#include <ireslib.hpp>                  // IResourceLibrary/IResourceId
#include <istring.hpp>                  // IString
#include <isysmenu.hpp>                 // ISystemMenu
#include <ititle.hpp>                   // ITitle
#include <iradiobt.hpp>

#include "af9apply.h"                   // Resource ids
#include "rpoinfo.hpp"
#include "rpoinfo.h"
#include "euophlp.h"
#include "mainw.hpp"

//edw
IString strOldName="";
IString strOldTieLine="";

RpoinfoFrame :: RpoinfoFrame( XWindow *pOwner, RPOForwardingData & theData, EUOPProfile *pProf)
                : IFrameWindow(IResourceId(DLG_RPOINFOPNL), NULL, pOwner)
                , rpoData(theData)
                , pProfile(pProf)
{

   // Save parameters;

   pHelp = pOwner->helpWindow();

   // Create control objects.

   buildControls();

   // Add handlers for command, keyboard, and edit messages.

   ICommandHandler::handleEventsFor(this);
   IKeyboardHandler::handleEventsFor(this);
   IEditHandler::handleEventsFor(edtUserName);
   IEditHandler::handleEventsFor(edtTieLine);
   IEditHandler::handleEventsFor(edtUserId);
   IEditHandler::handleEventsFor(edtNodeId);
   IEditHandler::handleEventsFor(edtContractNum);

   // Set the dialog to self-destruct when closed.

   setAutoDeleteObject();
  /*
  IRectangle ctrRect = rect().centeredAt(desktopWindow()->rect().center());
  moveTo(ctrRect.bottomLeft());

  // attach this as an event handler for selection events
  // received from setting buttons, list boxes, combo boxes
  ISelectHandler::handleEventsFor(this);

  // translate the panel's rectangle from dialog units to
  // pels to size the window properly
  IRectangle sizeRect(294, 225);
  sizeTo(mapDialogRect(sizeRect).size());
  */
}

//=======================================================================
// FUNCTION NAME    buildControls
//
// DESCRIPTION      Instantiate the various dialog controls.
//=======================================================================

void RpoinfoFrame :: buildControls()
   {
   ppbOK = new IPushButton(IDC_PB_OK, this);
   ppbCancel = new IPushButton(IDC_PB_Cancel, this);
   ppbHelp = new IPushButton(IDC_PB_Help, this);

   edtUserName = new IEntryField(ID_ENTRY_USER_NAME, this);
   edtTieLine = new IEntryField(ID_ENTRY_TIE_LINE, this);
   edtUserId = new IEntryField(ID_ENTRY_VM_USER_ID, this);
         //, this, IRectangle(), IEntryField::defaultStyle() | IEntryField::upperCase);
   edtNodeId = new IEntryField(ID_ENTRY_VM_NODE_ID, this);
         //, this, IRectangle(), IEntryField::defaultStyle() | IEntryField::upperCase);

   edtContractNum = new IEntryField(ID_ENTRY_SPECIAL_CONTRACT_NUMBER, this);

   radFedCustYes = new IRadioButton(ID_RADIO_FEDCUST_YES, this);
   radFedCustNo = new IRadioButton(ID_RADIO_FEDCUST_NO, this);
   radEdAllowYes = new IRadioButton(ID_RADIO_EDALLOW_YES, this);
   radEdAllowNo = new IRadioButton(ID_RADIO_EDALLOW_NO, this);
   radCustStatusOwning = new IRadioButton(ID_RADIO_CUSTSTATUS_OWNING, this);
   radCustStatusUsing = new IRadioButton(ID_RADIO_CUSTSTATUS_USING, this);
   radMachStatusLease = new IRadioButton(ID_RADIO_MACSTATUS_LEASE, this);
   radMachStatusPurchMaint = new IRadioButton(ID_RADIO_MACSTATUS_PURCHASEMAINTENANCE, this);
   radMachStatusPurchPerCall = new IRadioButton(ID_RADIO_MACSTATUS_PURCHASEPER_CALL, this);

  // set values
  radFedCustNo->select();
  radEdAllowNo->select();
  radCustStatusOwning->select();
  radMachStatusPurchMaint->select();
  edtUserName->setLimit(20);
  edtUserName->setFocus();
  edtTieLine->setLimit(8);
  edtUserId->setLimit(8);
  edtNodeId->setLimit(8);
  edtContractNum->setLimit(5);

  if (pProfile) {
    edtUserName->setText(pProfile->GetStringKey(EUOPProfile::UserName));
    edtTieLine->setText(pProfile->GetStringKey(EUOPProfile::UserTieLine));
    edtUserId->setText(pProfile->GetStringKey(EUOPProfile::UserVM_Id));
    edtNodeId->setText(pProfile->GetStringKey(EUOPProfile::UserVM_Node));
    strOldName = edtUserName->text();
    strOldTieLine = edtTieLine->text();
   }
}


//=======================================================================
// FUNCTION NAME    command
//
// DESCRIPTION      Handle command messages.
//=======================================================================
Boolean RpoinfoFrame::command(ICommandEvent &evt)
{
  switch(evt.commandId())
  {
    case IDC_PB_OK:
    {
      if (readControls())
        {
        dismiss(IDC_PB_OK);
        ((IFrameWindow *)owner())->setFocus();
        }
      break;
    }

    case IDC_PB_Cancel:
    {
      dismiss(IDC_PB_Cancel);
      ((IFrameWindow *)owner())->setFocus();
      break;
    }

    case IDC_PB_Help:
    {
      if (pHelp)
        pHelp->show( IHelpWindow::general);
      break;
    }
    default:
      return false;
   }
   return true;
}

//=======================================================================
// FUNCTION NAME    systemCommand
//
// DESCRIPTION      Handle system command events.
//=======================================================================

Boolean RpoinfoFrame :: systemCommand(ICommandEvent& cmdEvt)
   {

   // Hide this window instead of closing it.

   if ( cmdEvt.commandId() == ISystemMenu::idClose )
      {
      postEvent(IWindow::command, IDC_PB_Cancel);
      return true;
      }
   return false;
   }

//=======================================================================
// FUNCTION NAME    virtualKeyPress
//
// DESCRIPTION      Handle the Escape key.
//=======================================================================

Boolean RpoinfoFrame :: virtualKeyPress(IKeyboardEvent& keyEvt)
   {
   if ( keyEvt.virtualKey() == IKeyboardEvent::esc )
      {
      postEvent(IWindow::command, IDC_PB_Cancel);
      return true;
      }
   return false;
   }

//=======================================================================
// FUNCTION NAME    edit
//
// DESCRIPTION      Handle entry field edit events.
//=======================================================================

Boolean RpoinfoFrame :: edit(IControlEvent& ctlEvt)
   {
   IString str, strNew;
   Boolean valid;
   unsigned long  l;
   //convert to uppercase
   if ( edtUserId->hasTextChanged())
      {
      l = edtUserId->cursorPosition();
      edtUserId->setText( edtUserId->text().upperCase());
      edtUserId->setCursorPosition( l);
      }

   if ( edtNodeId->hasTextChanged())
      {
      l = edtNodeId->cursorPosition();
      edtNodeId->setText( edtNodeId->text().upperCase());
      edtNodeId->setCursorPosition( l);
      }

   //ensure in (" abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
   if ( edtUserName->hasTextChanged())
      {
      l = edtUserName->cursorPosition();
      str = edtUserName->text();
      strNew = str[ l];//one char newly entered

      if ( !strNew.isAlphabetic() && strNew != " ")
         edtUserName->setText(strOldName);
      else
         strOldName = edtUserName->text();
      edtUserName->setCursorPosition( l);
      }

   //ensure in ("0123456789-") range
   if ( edtTieLine->hasTextChanged() && !edtTieLine->isEmpty())
      {
      l = edtTieLine->cursorPosition();
      str = edtTieLine->text();
      if ( !str.length())
         return false;
      strNew = str[ l];//one char
      if ( !strNew.isDigits() && strNew != "-")
         edtTieLine->setText(strOldTieLine);
      else
         strOldTieLine = edtTieLine->text();
      edtTieLine->setCursorPosition( l);
      }
   return false;
   }

Boolean RpoinfoFrame::readControls()
{
  rpoData.userName = edtUserName->text().strip();
  rpoData.tieLine  = edtTieLine->text().strip();
  rpoData.vmUserId = edtUserId->text().strip().upperCase();
  rpoData.vmNodeId = edtNodeId->text().strip().upperCase();
  rpoData.specialContractNum = edtContractNum->text().strip();
  rpoData.federalCustomer = radFedCustYes->isSelected();
  rpoData.educationAllowance = radEdAllowYes->isSelected();
  rpoData.customerOwning = radCustStatusOwning->isSelected();
  rpoData.machineStatus =
    (radMachStatusLease->isSelected() ? Leasing :
      (radMachStatusPurchMaint->isSelected() ? PurchaseMaintenance : PurchasePerCall));
  if (rpoData.userName.size() &&
      rpoData.tieLine.size()  &&
      rpoData.vmUserId.size() &&
      rpoData.vmNodeId.size() &&
      (!rpoData.federalCustomer || rpoData.specialContractNum.size())) {
    if (pProfile) {
      pProfile->SetStringKey(EUOPProfile::UserName,rpoData.userName);
      pProfile->SetStringKey(EUOPProfile::UserTieLine,rpoData.tieLine);
      pProfile->SetStringKey(EUOPProfile::UserVM_Id,rpoData.vmUserId);
      pProfile->SetStringKey(EUOPProfile::UserVM_Node,rpoData.vmNodeId);
      }
    return True;
    }
  else
    {
    IMessageBox msg = IMessageBox(this);
    msg.setTitle("Data Error");
    msg.show("One or more required fields is left blank",
             IMessageBox::errorIcon | IMessageBox::enterButton |
             IMessageBox::applicationModal | IMessageBox::defButton1 |
		IMessageBox::systemModal);
    return False;
    }
}

RpoinfoFrame :: ~RpoinfoFrame()
   {
   delete ppbOK;
   delete ppbCancel;
   delete ppbHelp;

   delete edtUserName;
   delete edtTieLine;
   delete edtUserId;
   delete edtNodeId;
   delete edtContractNum;

   delete radFedCustYes;
   delete radFedCustNo;
   delete radEdAllowYes;
   delete radEdAllowNo;
   delete radCustStatusOwning;
   delete radCustStatusUsing;
   delete radMachStatusLease;
   delete radMachStatusPurchMaint;
   delete radMachStatusPurchPerCall;
   }

/*-------------------------------------------------------------
 selected:

 Selection event handler.  This function is invoked when the
 object receives a selection event (WM_COMMAND message) from
 a child object (selection buttons, list boxes, and combo
 boxes).  This function returns true if the event was handled
 or false if not.
------------------------------------------------------------
Boolean RpoinfoFrame::selected(IControlEvent &evt)
{
  switch(evt.controlId())
  {
    case ID_RADIO_FEDCUST_YES:  // selected Yes
    {
      // Insert code to handle the selection event below

      break;
    }
    case ID_RADIO_FEDCUST_NO:  // selected No
    {
      // Insert code to handle the selection event below

      break;
    }
    case ID_RADIO_EDALLOW_YES:  // selected Yes
    {
      // Insert code to handle the selection event below

      break;
    }
    case ID_RADIO_EDALLOW_NO:  // selected No
    {
      // Insert code to handle the selection event below

      break;
    }
    case ID_RADIO_CUSTSTATUS_OWNING:  // selected Owning
    {
      // Insert code to handle the selection event below

      break;
    }
    case ID_RADIO_CUSTSTATUS_USING:  // selected Using
    {
      // Insert code to handle the selection event below

      break;
    }
    case ID_RADIO_MACSTATUS_LEASE:  // selected Lease
    {
      // Insert code to handle the selection event below

      break;
    }
    case ID_RADIO_MACSTATUS_PURCHASEMAINTENANCE:  // selected Purchase/Maintenance
    {
      // Insert code to handle the selection event below

      break;
    }
    case ID_RADIO_MACSTATUS_PURCHASEPER_CALL:  // selected Purchase/Per Call
    {
      // Insert code to handle the selection event below

      break;
    }
    default:
         return false;
   }
   return true;
}
*/

