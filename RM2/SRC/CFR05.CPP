 /*--------------------------------------------------------------------------*\
 |    Filename - CFRV.CPP                                                     |
 |      contains source for the following RM/2 class implementations:         |
 |                                                                            |
 |          CFR05  - To manipulate the CFReport's version 31  Record Type 05  |
 |                                                                            |
 |          CFR05List - An array CFR05 record pointers.                       |
 |                                                                            |
 |          CFR52List - An array CFR52 record pointers.                       |
 \*--------------------------------------------------------------------------*/

        /*---------------------------------------------------*\
        |                      Includes                       |
        \*---------------------------------------------------*/
#include <isynonym.hpp>                          // Definition of Boolean etc
#include <string.h>
#include <stdio.h>

        /*---------------------------------------------------*\
        |               RM/2-specific includes                |
        \*---------------------------------------------------*/
#include "cfr05.hpp"

char *pRM2SignatureRecordV31 = "05         10   This CFReport is generated by Base Retrieval";

 /*--------------------------------------------------------------------------*\
 |                                CFR05 Class                                 |
 \*--------------------------------------------------------------------------*/
unsigned CFR05::referenceNotesNumber(CFRecV * pRec)
{
 Record_05 * p5;
 if (pRec && (pRec->type()==5) && (p5 = (Record_05 *)(pRec->record())) &&
     (strlen((char *)p5) >= (offsetof(Record_05,RefNotesNmbr)+sizeof(p5->RefNotesNmbr))))
//   return myantou(p5->RefNotesNmbr,sizeof(p5->RefNotesNmbr));
   return cfrUnsigned(p5->RefNotesNmbr,sizeof(p5->RefNotesNmbr));
 return 0;
}

CFR05::PrintType CFR05::printType(CFRecV * pRec)
{ return pRec? printType(((Record_05 *)(pRec->record()))->TypePrint) : None; }

CFR05::PrintType CFR05::printType(char c)
{
 switch(c) {
   case '1': return  BeforeNextMachine;
   case '2': return  BeforeTotals     ;
   case '3': return  AfterTotals      ;
   case '4': return  AfterHardware    ;
   case '5': return  TopOfReport      ;
   case '6': return  BottomOfReport   ;
   case '7': return  TopOfSystem      ;
   case '8': return  BottomOfSystem   ;
   case 'A': return  TopOfSubSystem   ;
   case 'B': return  BottomOfSubSystem;
   }
 return None;
}

 /*--------------------------------------------------------------------------*\
 |                              CFR05List Class                               |
 \*--------------------------------------------------------------------------*/
Boolean CFR05List :: add(const char * Buffer)
{
 if (Buffer && (CFRecType(Buffer) == 5) &&
                                                 // last used field
     (strlen(Buffer) > offsetof(Record_05,TypePrint))) {
   Add(new CFRecV(sizeof(Record_05),Buffer));
   return true;
   }
 return false;
}

Boolean CFR05List :: addSignatureRec(unsigned RefNotesNo)
{
 CFRecV * pRec = new CFRecV(sizeof(Record_05),pRM2SignatureRecordV31);
 if (pRec) {
   Record_05 * p5 = (Record_05 *)(pRec->record());
   CFRPaddCopySZ(p5->RefNotesNmbr,(char *)IString(RefNotesNo),
                 sizeof(p5->RefNotesNmbr),'0');
   Add(pRec);
   }
 return (pRec != 0);
}

unsigned CFR05List::fWriteCFR(FILE *f,CFR05::PrintType type,unsigned referenceNo)
{
 CFRecV * p;
 for (unsigned i = 0,cnt = 0, N = NumberElements() ; i < N ; i++ )
   if ((p = element(i)) && (CFR05::printType(p) == type) &&
       (!referenceNo || (referenceNo == CFR05::referenceNotesNumber(p))))
     cnt += p->fWriteCFR(f)? 1 : 0;
 return cnt;
}

unsigned CFR05List::fWriteCFR(FILE *f,unsigned referenceNo)
{
 CFRecV * p;
 for (unsigned i = 0,cnt = 0, N = NumberElements() ; i < N ; i++ )
   if ((p = element(i)) && (referenceNo == CFR05::referenceNotesNumber(p)))
     cnt += p->fWriteCFR(f)? 1 : 0;
 return cnt;
}

 /*--------------------------------------------------------------------------*\
 |                              CFR52List Class                               |
 \*--------------------------------------------------------------------------*/
Boolean CFR52List :: add(int id, const char * Buffer)
{
 CFRecV * p = 0;
 if (Buffer && (p = new CFRecV(Buffer,id)))
   Add(p);
 return (p != 0);
}

unsigned CFR52List::fWriteCFR(FILE *f,int id)
{
 CFRecV * p;
 for (unsigned i = 0,cnt = 0, N = NumberElements() ; i < N ; i++ )
   if ((p = element(i)) && (p->id() == id))
     cnt += p->fWriteCFR(f)? 1 : 0;
 return cnt;
}
//////////////////////////////////////////////////////////////

#ifdef UNITTEST

#include <stdlib.h>
#include <iostream.h>

char *p1  = "10123description 1";
char *p2  = "10223description 2";
char *p3  = "10323description 3";
char *p4  = "10423description 4";
char *p5  = "10523description 5";
char *p6  = "10623description 6";


void main(void)
{
 if (1)
   {
    CFR10List L10;
    L10.add(1,p1);
    L10.add(2,p2);
    L10.add(3,p3);
    L10.add(4,p4);
    L10.add(5,p5);
    L10.add(6,p6);

    cout <<  "L10 : " << L10 << endl;
    cout <<  "L10.description(3) : " << L10.description(3) << endl;
    cout <<  "L10.referenceNotesNumber(3) : " << L10.referenceNotesNumber(3) << endl;
   }

#ifdef __DEBUG_ALLOC__
   _dump_allocated(16);
#endif

}

#endif


//////////////////////////////////////////////////////////////
